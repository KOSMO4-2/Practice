package com.toyou.project.service.user;

//import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.toyou.project.dao.user.UserRepository;
import com.toyou.project.model.User;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private BCryptPasswordEncoder encoder;
	
	@Autowired
	private UserRepository userRepository;
	
	// 회원가입 아이디 체크
	@Override
	public int idCheck(String userId) {
		int result = userRepository.findByUserId(userId);
		return result ;
	}
	
	
	
	// 회원가입
	@Transactional
	public void userJoin(User user) {
//		회원가입시 패스워드를 인코딩 하지 않으면 시큐리티 로그인을 이용할 수 없다.
		String rawPassword = user.getUserPassword();
		String encPassword = encoder.encode(rawPassword);
		user.setUserPassword(encPassword);
		userRepository.save(user);
	}
	
	// 회원 찾기
	@Transactional(readOnly=true)
	public User userFind(String username) {
		User user = userRepository.findByUserId(username).orElseGet(()->{
			return new User();
		});
		return user;
	}
	
	
	// 정보수정
	@Transactional
	public void userUpdate(User user) {
//		수정시에는 영속성 컨텍스트 User 오브젝트를 영속화시키고, 영속화 된 User 오브젝트를 수정
//		select 해서 User오브젝트를 DB로부터 가져오는 이유는 영속화를 하기 위해
//		영속화된 오브젝트를 변경하면 자동으로 DB에 update문을 날려줌
		User persistance = userRepository.findById(user.getUserNo()).orElseThrow(()->{
			return new IllegalArgumentException("회원찾기 실패");
		});
		if(persistance.getOauth() == null || persistance.getOauth().equals("")) {
			String rawPassword=user.getUserPassword();
			String encPassword = encoder.encode(rawPassword);
			persistance.setUserPassword(encPassword);
			
		}
		persistance.setUserEmail(user.getUserEmail());
//		회원수정 함수 종료 = 서비스 종료 = 트랜젝션 종료 = commit이 자동실행
//		영속화 된 persistance객체의 변화가 감지되면 더티체킹이 되어 update문을 날려줌
		
	}

	
	
}